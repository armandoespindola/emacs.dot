#+STARTUP: content
* Configure =use-package=

We use =use-package= to install and configure every package.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  (scroll-bar-mode -1)
#+end_src
* Org mode
#+begin_src emacs-lisp
  (use-package org)
#+end_src
* Terminal
#+begin_src emacs-lisp
    ;; (use-package vterm
    ;;   :load-path  "/Users/espinda/.emacs.d/emacs-libvterm")

  (use-package vterm
      :ensure t
      :config
      (add-hook 'vterm-mode-hook
		(lambda () (setq-local global-hl-line-mode nil)))

      (global-set-key (kbd "C-c t") 'vterm))
  (add-to-list 'vterm-tramp-shells '("ssh" "/bin/bash"))
  (add-to-list 'vterm-tramp-shells '("sudo" "/bin/bash"))

    (use-package vterm-toggle
    :bind
    ("<f10>" . vterm-toggle)
    ("C-`" . vterm-toggle-cd))

  (global-set-key (kbd "s-n") 'vterm-toggle-forward)
  (global-set-key (kbd "s-p") 'vterm-toggle-backward)

  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
	       '((lambda (buffer-or-name _)
		     (let ((buffer (get-buffer buffer-or-name)))
		       (with-current-buffer buffer
			 (or (equal major-mode 'vterm-mode)
			     (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
		  (display-buffer-reuse-window display-buffer-at-bottom)
		  ;;(display-buffer-reuse-window display-buffer-in-direction)
		  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
		  ;;(direction . bottom)
		  ;;(dedicated . t) ;dedicated is supported in emacs27
		  (reusable-frames . visible)
		  (window-height . 0.3)))

#+end_src
* Hide all minor modes
#+BEGIN_SRC emacs-lisp
  (use-package minions
    :config
    (setq minions-mode-line-lighter "⚙"
	  minions-mode-line-delimiters (cons "" ""))
    (minions-mode 1))
#+END_SRC

* Configure a mode line
#+BEGIN_SRC emacs-lisp
(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))
#+END_SRC

* Emacs Apperance
** Window preferences
#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
#+end_src

#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src

** Theme

Personal theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-monokai-pro t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
;;    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

    ;; (use-package monokai-theme
    ;; 	    :ensure t
    ;; 	    :config
    ;; 	    (load-theme 'monokai t))

    ;;   (setq ;; foreground and background
    ;; 	monokai-foreground     "#ABB2BF"
    ;; 	monokai-background     "#282C34"
    ;; 	;; highlights and comments
    ;; 	monokai-comments       "#F8F8F0"
    ;; 	monokai-emphasis       "#282C34"
    ;; 	monokai-highlight      "#FFB269"
    ;; 	monokai-highlight-alt  "#66D9EF"
    ;; 	monokai-highlight-line "#1B1D1E"
    ;; 	monokai-line-number    "#F8F8F0"
    ;; 	;; colours
    ;; 	monokai-blue           "#61AFEF"
    ;; 	monokai-cyan           "#56B6C2"
    ;; 	monokai-green          "#98C379"
    ;; 	monokai-gray           "#3E4451"
    ;; 	monokai-violet         "#C678DD"
    ;; 	monokai-red            "#E06C75"
    ;; 	monokai-orange         "#D19A66"
    ;; 	monokai-yellow         "#E5C07B")

#+end_src

** Font configuration
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
		      :height 120)

;;  (set-face-background 'hl-line "#E47200")
  (use-package default-text-scale
    :bind
    (("C-)" . default-text-scale-reset)
     ("C-=" . default-text-scale-increase)
     ("C--" . default-text-scale-decrease)))
#+end_src
** Beacon
#+begin_src emacs-lisp
   (use-package beacon)
   (beacon-mode 1)
  (setq beacon-color "#FFFF00")
#+end_src
* Fancy lambdas
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC
* Company mode
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :custom
       (company-idle-delay 0)
       (company-tooltip-align-annotations t)
       :config
       (add-hook 'prog-mode-hook 'company-mode))
   #+END_SRC

Company-box adds semantic icons to the company completion menu

#+begin_src emacs-lisp
(use-package company-box
  :after company
  :hook (company-mode . company-box-mode))
#+end_src
* Projectile

#+begin_src emacs-lisp
  (use-package ag)

  (use-package projectile
    :bind
    ("C-c v" . projectile-ag)

    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-completion-system 'ivy
	  projectile-switch-project-action 'projectile-dired
	  projectile-require-project-root nil))

  (projectile-global-mode)
#+end_src

* Configure ivy and counsel

#+begin_src emacs-lisp
  (use-package counsel
  :bind
  ("M-x" . 'counsel-M-x)
  ("C-s" . 'swiper)

  :config
  (use-package flx)
  (use-package smex)

  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
        '((swiper . ivy--regex-plus)
          (t . ivy--regex-fuzzy))))
#+end_src

* Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package let-alist)
     (use-package flycheck
       :init (global-flycheck-mode))
   #+END_SRC

* File management with dired
#+BEGIN_SRC emacs-lisp
  (use-package dired-hide-dotfiles
    :config
    (dired-hide-dotfiles-mode)
    (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))
#+END_SRC

Kill the current buffer when selecting a new directory

#+BEGIN_SRC emacs-lisp
(setq dired-kill-when-opening-new-dired-buffer t)
#+END_SRC

Kill buffer without asking

#+BEGIN_SRC emacs-lisp
  (defun hrs/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'hrs/kill-current-buffer)
#+END_SRC
* Configure yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet)
  (use-package yasnippet-snippets)
  ;(setq yas-snippet-dirs '("~/.emacs.d/snippets/text-mode"))
  (yas-global-mode 1)
  (setq yas-indent-line 'auto)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status)

  :config
  (use-package with-editor))
#+END_SRC

* Org-ref
   #+BEGIN_SRC emacs-lisp
     (use-package helm-bibtex)
     (use-package org-ref)

     (setq bibtex-completion-bibliography '("~/Dropbox/emacs/bibliography/library.bib")
	 bibtex-completion-library-path '("~/Dropbox/emacs/bibliography/bibtex-pdfs/")
	   bibtex-completion-notes-path "~/Dropbox/emacs/bibliography/notes/"
	   bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

	   bibtex-completion-additional-search-fields '(keywords)
	   bibtex-completion-display-formats
	   '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	     (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	     (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	     (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	     (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	   bibtex-completion-pdf-open-function
	   (lambda (fpath)
	     (call-process "open" nil 0 nil fpath)))

     (setq org-ref-default-citation-link "citep")


     (require 'org-ref-helm)

     (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
	   org-ref-insert-cite-function 'org-ref-cite-insert-helm
	   org-ref-insert-label-function 'org-ref-insert-label-link
	   org-ref-insert-ref-function 'org-ref-insert-ref-link
	   org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))

     ;; to show availability of pdf and notes
     (setq bibtex-completion-pdf-symbol "⌘")
     (setq bibtex-completion-notes-symbol "✎")

     (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-cite-link)
     (define-key org-mode-map (kbd "C-u C-c ]") 'org-ref-insert-ref-link)
     (define-key org-mode-map (kbd "C-u C-u C-c ]") 'org-ref-insert-label-link)



     (require 'bibtex)
     (setq bibtex-autokey-year-length 4
	   bibtex-autokey-name-year-separator "-"
	   bibtex-autokey-year-title-separator "-"
	   bibtex-autokey-titleword-separator "-"
	   bibtex-autokey-titlewords 2
	   bibtex-autokey-titlewords-stretch 1
	   bibtex-autokey-titleword-length 5)

     ;; (setq org-latex-pdf-process
     ;;       '("pdflatex -interaction nonstopmode -output-directory %o %f"
     ;; 	"bibtex %b"
     ;; 	"pdflatex -interaction nonstopmode -output-directory %o %f"
     ;; 	"pdflatex -interaction nonstopmode -output-directory %o %f"))

     (setq org-latex-pdf-process '("latexmk -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -output-directory=%o -f %f"))
    ;; (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

     ;; Quotes Exporting
     (setq org-export-latex-quotes t)
     ;; Labels for figures
     (setq org-latex-prefer-user-labels t)

   #+END_SRC
   
* PDF Tools
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :config
      (pdf-tools-install)
      ;; This means that pdfs are fitted to width by default when you open them
      (setq-default pdf-view-display-size 'fit-width)
      :custom
      (pdf-annot-activate-created-annotations t "automatically annotate highlights"))

    (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
  #+END_SRC
* Personal Data
  #+BEGIN_SRC emacs-lisp
    (load-file "~/.emacs.d/personal_config.el")
  #+END_SRC

* Notes (Capture)
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/Dropbox/Emacs/org/Notes/notes.org")
(global-set-key (kbd "\C-c c") #'org-capture)
#+END_SRC

* Org-Roam
#+BEGIN_SRC emacs-lisp
	(use-package org-roam
	  :ensure t
	  :custom
	  (org-roam-directory (file-truename "~/Dropbox/Emacs/org/slip-box/"))
	  :bind (("C-c n l" . org-roam-buffer-toggle)
		 ("C-c n f" . org-roam-node-find)
		 ("C-c n g" . org-roam-graph)
		 ("C-c n i" . org-roam-node-insert)
		 ("C-c n c" . org-roam-capture)
		 ;; Dailies
		 ("C-c n j" . org-roam-dailies-capture-today))
	  :config
	  ;; If you're using a vertical completion framework, you might want a more informative completion interface
	  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
	  (org-roam-db-autosync-mode)
	  ;; If using org-roam-protocol
	  (require 'org-roam-protocol))


    ;; org-roam-bibtex
    (use-package org-roam-bibtex
      :after org-roam
      :config
      (setq orb-insert-interface 'helm-bibtex)
      (require 'org-ref))


  ;; roam templates
(setq org-roam-capture-templates
        `(("d" "default" plain
           "%?"
           :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n\n")
           :unnarrowed t)
          ("r" "ref" plain
           "%?"
           :target (file+head "${citekey}.org"
                              "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n\n")
           :unnarrowed t)))
#+END_SRC

* Org-reveal
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal)
#+END_SRC
* Agenda
  #+BEGIN_SRC emacs-lisp

    (setq org-agenda-files '("/Users/espinda/Dropbox/Emacs/org/agenda.org"))

  #+END_SRC
  
